<div style="text-align: left;">
I already said that Clean Code is one of the most important things you can learn in Software Engineering?
<br>
And that bad code can complicate your life by making simple things harder that they really are?
<br>
Welcome to the PewdiePie's favorite blog about Software Engineering and today I'm going to show you how to create meaningful and useful functions
that can make your code with <a href="https://gabrielslima.github.io/blog/post.html?id=6" target="blank">amazing names</a> way more simple, well structured and
simple.
<br>
<br>
I don't have 200+ years of experience in this field but I can tell you that one of the enemies in Software Engineering is the complexity.
Every complex code has more than a complex solution behind it. It has hidden bugs, cognitive efforts to understand things and more and more time 
to figure out what the code is doing.
<br>
For what I've been seeing in past projects is that complex code can make things very complicated for everyone. Speaking
specifically about the developers's point of view, we have to deal with delivery time and other problems like performance, reusability, readibilitty, 
scalabilitty, availability and so on.
<br>
Dealing with all of those things and still having to understand what everything is doing inside a 100 lines function can be overwhelming and 
lead to serious real health problems and of course that it's not just because you have a bad code to work with but because others problems
like the pressure to delivery something can make your anxiety levels go astronomical and so on.
<br>
<br>
I'm not saying if you should or not to sacrifice your own mental health to delivery things (you shouldn't). That's another discussion and I prefer to maybe write 
a specific blog post to talk about it.
<br>
I'm saying is that if we follow the best practices those problems can be avoided and can make things easier for yourself.
<br>
<br>
I'm going to use principles from the book Clean Code (I"m not being paid for this) to refact my own code as I did on 
<a href="https://gabrielslima.github.io/blog/post.html?id=6" target="blank">this blog post</a> that I talk about <b>meaningful names</b> (you should
read it if you want to save the world from your bad name choices and prevent our world from being exploded when aliens read your code).
<h3></h3>
<br>
<br>

<h3>Levels of Abstraction</h3>
To better understand how long functions/methods should be it's important to understand levels of abstraction in programming.
<br>
Abstraction is the process of hiding information that isn't relevant for a giving context. Like when you turn on the lights 
or when you turn on the car or move your mouse or even when you are texting. You don't need to know how those things are working internally
to actually use them.

<br>
<br>
When you have abstractions inside abstractions you have <b>levels of abstraction</b>. I don't know if that is the correct way to say this. But what
I'm trying to say is that when you have a super deatailed context it's necessary to creat more than one layer of abstraction creating 
subcontexts that compose a bigger context.
<br>

<h3>It's not just about the complexity</h3>
It's not from today that documentation is becoming a thing in sofware projects...
<br>
I would like to share with you a experience of mine so you can have my point of view. 
<br>
<br>
I was working on this project, not a super complex project but not that simple either. I was just starting
on the team and of course that the first action of the members was to pass on the knowledge about the solution.
<br>
<br>
The project had about 8 microservices, all of them interacting with each other throught APIs and message broker.
The project had his own way to deal with logs meaning that all the output was managed by custom code 
and there was no pattern for the output. Well, if it had at the beginning, it was lost during the development of the project.

<br>
<br>
After some months the company had some changes related to...physical access, let's say...and some of my fellow
colleagues decided what was best for them, of course and switched companies.
After a few more months, this project had new people working on it and lots of places where
almost no one knew what was happening.
<br>
<br>
The project had a documentation, of course. But the diagrams of the architecture it's not always enough.
There was so many things happening inside the code. One message started the processing and our in memory 
database was called, then our MongoDB was called throught a massive for loop than methods from abstract classes and 
log output everywhere...the job was done. The problem was no one knew how.
<br>
<br>
Speaking for myself, I had a limitation related to my knowledge, of course. But as I started to grow my technical
knowledge I could see what was happening with more clarity. Didn't take much time to get the rithm and get used with
the previous programmers's way of thinking.
<br>
<br>
I also started to identify that others new programmers where facing some issues trying to figure out and
connect the dots of the solution. I found myself explaning where a given piece of code was located inside the
project's architecture a pretty god amount of times and struggling a lot to understand other parts as well.
<br>
<br>
What happened was that with the desire (let's call it that way) of delivering things in a short amount of time the real documentation,
the code, started to get more and more information and the developer that was trying to keep it organized
didn't had much time to do so for a obvious reason.
<br>
<br>
What I could learn with that situation is that building the <b>right functions</b> can help not only with the complexity
of the code, but with the documentation.
<br>
Write code is easier than keeping it. When writing code the solution is fresh in your mind, you know what you need
and even though most people think about the code's maintenance and other things we can't cover all the possibilitties
and build an abstract code that will handle everything. So it's important that the code's structure can be 
understood as easier as possible.
</div>