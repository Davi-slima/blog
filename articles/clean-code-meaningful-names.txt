<div style="text-align: left;">
One of the most important things you can learn in programming is Clean Code.
<br>
Writing bad code can make things more complicated than they really are and forces you to spend so much time
trying to figure out what one piece of code does before actually doing any work.
<br>
<br>
This situation can be solved by executing one piece of code and giving it the proper data to process. But 
what if you don't even know what is the data input and the piece of code has like 100 of lines with one for loop
behind the other and some times one for loop inside the other with lots of if else statements?
That makes things a little bit harder, isn't? 

#Long line break
<br>
<br>
# Long line break

Today i'm going to show you how I go through this refact process almost everyday actually using my own code as an example
using recommendations from the book <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship-ebook/dp/B001GSTOAM" targe="blank">
Clean Code></a>

#Long line break
<br>
<br>
# Long line break

<h3>Static Project: understanding the idea</h3>
<a href="https://github.com/GabrielSlima/Static-Project" target="blank">Static Project</a> was one of my first public projects and
It was intented to create blogs main pages and blog posts for me. Something like this:
<img class="post-img" src="images/clean-code-meaningful-names/static_proect_demo.png">
<img class="post-img" src="images/clean-code-meaningful-names/static_proect_demo_post.png">

A very simple idea with a very simple implementation which made
this project a perfect way for applying concepts of OOP and learn the basics of a new programming language.
<br>
This project being one of the first projects of mine is perfect to show you how I could make things better and clear.
#Long line break
<br>
<br>
# Long line break

Following the documentation it seems that main.py controls the user input and give us the possibility to create a new project or a new 
blog post:
<div class="code-snipppet">
python3 main.py <COMMAND> <COMMAND_ARGUMENTS>
</div>

Lets try this:
<br>
On my computer I'll open my terminal and clone the project:
<img class="post-img" src="images/clean-code-meaningful-names/project_download.gif">

Let's execute the command to create a new project as said in the doc:
<img class="post-img" src="images/clean-code-meaningful-names/new_project.gif">

And that's what we have inside the project's folder:
<img class="post-img" src="images/clean-code-meaningful-names/project_structure.gif">

And there it is, the main page:
<img class="post-img" src="images/clean-code-meaningful-names/project_main_page.gif">

Let's try to create a new blog post to see what happens:
<img class="post-img" src="images/clean-code-meaningful-names/new_blog_post.gif">
<img class="post-img" src="images/clean-code-meaningful-names/blog_post_visualization.gif">

#Long line break
<br>
<br>
# Long line break

It seems to be working the way it was suposed to...now let's analyse the core code an start working:
<img class="post-img" src="images/clean-code-meaningful-names/writer-typing.gif">

#Long line break
<br>
<br>
# Long line break


<h3>The 3 big questions</h3>
The Clean Code book recommends that when choosing the name of a class, function or variable we should have in mind the following for big questions:
<u>
<li>Why it exists?</li>
<li>What it does?</li>
<li>How it is used?</li>
</ul>
So following this Idea


One thing I usually do to make sure that I'm choosing the right name for my variable, at least for the moment, 
of course, is to review my own code after some hours, maybe even days or weeks. If I don't really know what the variable or even
the function is doing I just change the name to something that makes more sense on the moment and repeat the process
till eventually I come up with a more clear name. 
<br>
That's something that I usually do when I have some work to do with this piece of code specifically 
and I see the opportunity to make things better and more clear.  
<br>
<br>

</div>